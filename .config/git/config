[user]
  name = Hiroki Kondo
  email = kompiro@gmail.com
[color]
  # colorの設定(以下のコマンドは自動で色つける)
  status = auto
  diff = auto
  branch = auto
  interactive = auto
  grep = auto
[core]
  quotepath = false
[alias]
  st = status
  sh = show
  so = remote show origin
  ft = fetch
  up = pull --rebase       # pull rebase
  rbm = rebase master      # masterへのrebaseはよく使うのでalias
  ad = add
  ci = commit -a           # modifiedなファイルを全てstageへ
  cam = commit -a --amend  # 直前のcommitを修正
  co = checkout
  # branch関連
  br = branch
  ba = branch -a           # originも含めた全てのbranchを表示
  bm = branch --merged     # merge済みのbranchを表示
  bn = branch --no-merged  # mergeしてないbranchを表示
  # log関連
  wc = whatchanged         # logに変更されたファイルも一緒に出す
  ls = log --stat          # logに変更されたファイルも一緒に出す
  lp = log -p              # diffも一緒に出す
  la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
  lr = log origin          # originのlog
  oneline = log --pretty=oneline
  ranking = shortlog -s -n --no-merges
  # logをtree表示
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  # diff関連
  dm = diff master           # masterとのdiff
  dw = diff --color-words    # 単語単位でいろつけてdiff
  dc = diff --cached         # addされているものとのdiff
  ds = diff --staged         # 同上(1.6.1移行)
  d1 = diff HEAD~            # HEADから1つ前とdiff
  d2 = diff HEAD~~           # HEADから2つ前とdiff
  d3 = diff HEAD~~~          # HEADから3つ前とdiff
  d4 = diff HEAD~~~~         # HEADから4つ前とdiff
  d5 = diff HEAD~~~~~        # HEADから5つ前とdiff
  d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff
  # mergeの際にconflictが起きたファイルを編集
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  # mergeの際にconflictが起きたファイルをadd
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  # grep関連
  gr = grep
  gn = grep -n
  # flow関連
  fs = flow feature start
  fc = flow feature checkout
  fr = flow feature rebase
  ff = flow feature finish
  hs = flow hotfix start
  hc = flow hotfix checkout
  hr = flow hotfix rebase
  hf = flow hotfix finish
  rs = flow release start
  rf = flow release finish
  cleanup = "!git branch --merged | grep -v '\\*\\|master\\|develop' | xargs git branch -d"
  cleanpr = "!git branch -r --merged origin/master | grep -v -e origin/master -e origin/develop | xargs git branch -r -d"
  tasks = "!d() { description=$(git config branch.$1.description); if [ -n \"$description\" ]; then printf '\\033[1m%-45s\\033[0m %s\\n' \"$1\" \"$description\"; fi;}; f() { for branch in $(git branch); do d $branch; done; }; f"
  about-branch-old = "!d() { description=$(git config branch.$1.description); if [ -n \"$description\" ]; then echo \"\\033[1m$1\\033[0m $description\"; fi;}; f() { for branch in $(git branch); do d $branch; done; }; f"
  show-desc = "!f(){ git config branch.$(git rev-parse --abbrev-ref ${1:-@}).description;};f"
  desc = branch --edit-description
  task-add = "!f(){ git branch $1; git desc $1;}; f"
  for = "!f(){ for i in {1..5}; do echo 'test'; done; }; f"
  if = "!f(){ if true; then echo 'test'; fi; }; f"
  test = !"f() { printf '\\033[31m%s\\033[0m\\n' 'Hello World'; }; f"
  func = "!d() { echo $1; }; f(){ d 'func'; }; f"
  precommit = diff --cached --diff-algorithm=minimal -w
  show-pr = !"f() { git log --merges --pretty=\"format:%ad %h %s\" --date=iso --reverse --ancestry-path $1...${2:-upstream/master} | grep 'Merge pull request #' | head -n 1; }; f"
[push]
  default = current
#[url "ssh://git@github.com"]
#  insteadOf = https://github.com
[ghq]
  root = ~/work/src
[diff "sopsdiffer"]
  textconv = sops -d
